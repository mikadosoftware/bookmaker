.. include:: ../hdr.rst


Introduction
============


Where to start?
--------------- 
Looking around the shelves of any bookstore these days it may not seem that there
is a lack of books about IT management. Books on IT and programming abound, whole shelfs, 
are groaning under the weight of 300 page tomes promising to teach you a programming language
in 24 hours even if it will take 3 days to read the book. 

However look closer, there are plenty of books about how to use
Microsoft Office to improve your cashflow, how to set up Oracle in a few hours and promise in just 10 days they 
can make you a man, (no, sorry, thats Rocky Horror), but there is
nothing on how to run the 
department that looks after all this stuff. Until I became an IT manager it never really struck 
me that there was a gap in the market so to speak.

Admittedly it is not a large gap - the number of people who run IT depts is quite small compared t 
o the number who want to learn Excel a bit better.  But in many ways that is the essence of what I 
am trying to say - learning Excel a bit will not make a company vastly more profitable, nor will *not* learning Excel cause it to run crunchingly into administration. However companies and countries these days rely more and more on code and data, and it is the management of these two things, and the complexities inherent in that management [#]_ that is the stuff of an IT department. Mucking up your data or code *can* drive a company into banckruptcy, and getting it right, sweetly right, can vastly improve your bottom line. As for making you a man, well ... deal with that on your own.

To be fair it was sometime *after* I started running IT teams and departments that I noticed 
the bookstore problem, and that is becuase the idea of running an IT department is curiously 
absent from the minds of most people. It is taken for granted that running a big company somehow 
requires some magic potion for which shareholders should be grateful they only get stiffed a measly 
few million a year. Running a football team is a front page job and no sohortage of people looking at
how you do it.  BUt running an IT team  well thats just making sure the backups are done and maybe a 
bit of project management.

As you may guess I think there is more to it - and this book is my attempt to say why, and what 
it does take to run an IT dept.


What is an IT Manager / CIO / CTO / ...
---------------------------------------
In many ways this heading is the problem - what the hell do you call an IT manager.
Looking at job adverts 
it is easy to see a creeping job-title inflation. 

For the UK now, the term IT Manager seems to be reserved for the person in charge of the helpdesk
fixing the printers and so forth. WHilst for some companies this is a role with supervision over
dozens of people, it still is supervision. Head of IT seems to be becoming an accepted title for what I mean
- as is CTO or CIO. THese job descriptions indicate that the important point is you are in charge of
all the IT stuff for the company. 

And to me that is the clincher, whatever the job titles, whatever the description, the person who makes
the final, *informed* decision about the architecture of information data and code in an organisation is that
company's IT Manager. It might be the helpdesk supervisor, it might be the accountant, but ultimately
someone will decide how all the systems in a company fit together, work together and share information 
and share functions. Sometimes, quite often I suspect, the person who is the IT manager for a company is not even in the company. The final, informed decision maker - it is perfectly possible for that person to be a consultant hired by the nominally titled IT Manager, but that IT manager is not skilled enough to make IT decisions on their own. Frankly you need to be able to program before you can be in IT. NAd many many people who cannot program are in IT. Its like having someone in catering who cannot cook. The only job there is maitre'd.

Unfortunately, more often than not that decision is a non-decision - there is rarely anyone in the right position with the right skills to ensure the systems integrate in a way that benefits the organisation. As standards evolve and become widespread it is easier and easier to keep not taking decisions - all the components work together more or less easily.

.. sidebar:: No Decision here 

  this non-decision approach is vastly prevalent, and is getting more common, not less common.
  It is also one of the reasons I recommend OSS over microsoft. It is not some irrational hatred of the big bad Redmound
  but is a desire to see people take positive decisions over systems integration.  Many years ago the default  
  non-decision would leave a company with two systems that could not communicate, and so lead to the 
  *systems integrators* compnaies and cnsultants whose sole purpose was to come in and make the new system 
  work with the legacy computers, usually in a way that blames the old legacy computer, not the person who bought 
  an incompatible system in the first place.
  However now it is easier and easier to buy Microsoft (or SAP or Oracle) and thins do not break, they more or less work
  more or less well. However all that has happened is that Microsoft has chosen what they think is the best way 
  for your systems to work. Is it? Are you sure you do not want to think about that. If you run your IT the same way as millions of others, where does your competitive advantage come from? Some companies can answer that happy in the knowledge their competitive advantage lies outside of a CPU.. 
  What you need is someone who can sit down and think about how to get all your systems to work together in the 
  most beneficial way for you.)



Anyway, back to what makes a man ...
 

Cook well on your own
---------------------


Well, firstly there needs to be ability. Technical skills are, no matter what else is waved around, 
technical ability is vital. It is not that we expect the CIO to write all the code or configure all the
databases. But we do expect them to set the standards, spot the glaring design faults and ensure that
what is produced is the best quality we are willing to pay for.

An example that recently made my blood boil was a job ad for 'Head of IT', which clearly stated::

  A non-technical background is not considered a barrier, as there are 3rd party providers who 
  can supply technical assistance. 

Dear God, thats not "Head of IT". Thats a supervisior. At 80K a year.  I mean would we accept a job that ran ::

  Wanted - Head Chef. No need to able to cook, as the providers of frozen processed foods
  will be able to supply all assitance necessary.

Well actually we do get quite a few adverts like that - they explain the parlous state of our childrens
school meals, which have moved from something actually prepared and cooked on site to, well, Turkey Twizzlers.

And lets face it, the company above (a law firm of some sort) will get the same kind of nutritious and profitable IT systems as the patrons of the restaurant above will get as meals. All the value of a frozen breadcrumbed reconsititued chicken. And yet, yet look at the salary. It is based at 80K, a clear indication that the partners expect something special, something nutirtious and tasty from their 'Head of IT'.  They are willing to accept a dinner lady, but pay for Gordon Ramsey. I wonder which they are mostl likey to get applying?

so the first line of the job ad should read::

  wanted: Head Chef. As a *sine qua non* You must be able to cook well on your own. 

This really emphaisises the most obvious point about IT management and one that I feel is ignored and even quite 
controversial when I state it - A good IT manager should be able to do every job under him. FOr me the simple answer
is that the IT manager should be able to run a small office (say 3-5 people) entirely on his own. THis is the equivalent of
asking, if I hire Gordon Ramsey as a cook for my family (yeah right) will he be able to shop and cook from scratch all alone?
FOr GOrdon we can happily say yes. At that point we can worry if he can scale it up to a restaurant or a chain.
For an IT manager, we need to ask, can he set up and run all the email, web, printers 
and so forth for a 1 or 2 person office? If not, then on what basis do we think they can scale up?

The section of the book entitled *SoHo Solo* is about how to actually do this - to run a small office / home office (SoHo) as if you were on your own - from the initial setup of servers, to DNS, email virus scanning and database management.
It is quite a tall order, but then let us face it, buying quality fresh foods and knowing how to boil a lobster, make fresh pasta and raise a souffle is quite a tall order too. 

But the Head chef sets the tone
of a kitchen, sets the standards, and is the gateway through which all finished products must pass. He can only do this if he knows what good fresh pasta looks like and what is needed to prepare it. The same goes for an IT manager. 


Necessary but not sufficient
----------------------------
I freely and happily admit that *technical competance is a necessary but not sufficient condition* for being a successful IT manager.

An IT manager must play many roles, and I try and list them below, and what follows will be discussions on the roles 
and ways to play them out successfully.

- Technician and geek.
- Architect and Town Planner
- Project and Programme Manager
- Editor, Reviewer and Publisher (release mgmt)
- Accountant and Auditor
- Geek Philosopher and Storyteller (affecting culture (how we do things) and managing expectations)
- Modeller, monitor and mentor

- feedback, shout triumphs, sailing round storms
- refactoring code over time is like scraping off barnacles, broken windows

Guiding principles and philosophy
---------------------------------
There are several guiding principles

- If you do not design, build or sell the product, I will do all in my power to automate you.
- build from scratch, from scripts.
- release well
- everything can have programmatic access. Everything. 
- Wrong and not wrong
- everyone will be able to program, but not everyone will earn a living as a programmer. 
  Just as everyone can write but not everyone will earn a living writing.



programmatic access
-------------------

Wrong, and not wrong
--------------------
Most people think the world is a place of grey, uncertain moral and value judgements where somethings depend 
greatly on your point of view. Of course very few people think everything depends on your point of view (its very
hard to have a grey area of paedophilia for example) and equally few people feel nothing is realtive, that God or 
who ever has already laid down all you need to know.

Given this is it strange that most businesses seem to think that a project is a success or a failure, a contributr to the 
bottom line or not. 

I prefer, instrad of the right or wrong judegemtn to have 4 categories instead of two

- Right
- Not Wrong
- Wrong
- Not even wrong

Right is the best possible choice and outcome. It is the superlative option, the Van Gogh cornfields, the Da Vinci sketch. 
It is also nearly impossible to judge at the moment - the passage of time, comparison to many other alternatives is usually 
needed to be sure it was Right.

Not Even Wrong is a phrase coined by the German Phyisicist (xxx) - he was commenting on the work of a student with a certain
lack of tact, and made it clear that the student had not simply got his answer wrong, but that he had been working in the wrong directions. Its a little like my Maths O levels, where I was expected to 'show my workings' so that even if my long division failed me I would still get points for trying to divide the right fractions.

THis concept gives us a look at the ideas of Not Wrong. If right is the artisitically correct, perfect version  then 
there are others that are also close to perfect - constables sketches, Turner as a scultptor. THese are things that will not be world class, but are the poutput of talented professionsal with true skill.
Not wrong is where we have tried to divide the correct fractions, and got our division correct. Its just that we could have used calculus.

Wrong is where our long division failed us. We can at the time see that worng is wrong. We, or perhpas a professional IT manager
would say ' THat is not how I want it because that will lead to problems'


 


anlaogies
----------
driving
writing
cooking
architecture/building/construction


Ranting about non-technical requirements
----------------------------------------

Driving in 20C
Writing in 15C

Both changed the world, but ONLY when everyone[1] started to do it

[1] for a given value of everyone



technology makes possible everything you do, it surrounds you, 
feeds and clothes you shelters you and you could not survive without it

not understanding technology makes ou an ELoi, ignoring the real world
whilst the morlocks toil away beneath you

we must understandintechnology, how we go from energy to use,
how we can use it to survive, grow and do less damage.

less damage - the pest contorl version - cynaide pellets, DDT, GMO - each less violent.

Thinking *is* innovative. And lets face it, in the stone age would you like to have a book on emaotuions or a book on 
science

if we think about it, the writing analogy is truly forceful - would we consider it sensible that todays business
hires a team of writers everytime they want to write something down.?

THis in many ways used to be the stenopool, the bookmaker/accountant/dataentry, or the scribe.
What happened to them, what technological or social shifts moved them out?
THe hancock replaced by Lyons, the stenopool, replaced by cost of typist vs cost of PA.
The stenopool became PA, organisers, project mgrs.

The scribe. They became lawyers.

What will become of a society that has rules codified in a way only the computer can understand. We will need a profession
that can be trusted to write things down, the rules of society.



Understanding technology
------------------------



Its all about programming
-------------------------
Computers are there for programming, for computing the codified, straitjacketed expression of human intelligence known as source code.
These computers are for programming as paper is for writing. We do not hand our teenagers pen and paper and congratulate them 
as 'paper-literate' if they are able to fold an aeroplane, or doodle a recognisable tree.
the very nature of writing is its value, its ability to express and communicate 
across time and space. A program can do the same and more. Its expressiveness
can be greater, as it allows a recursion and growth that makes infinity seem podgy and small.

Books can take us out of ourselves and into the world, whereas a program can take us inside itself.

Where this new world will leave us all I do not know.  Its up to our children to find out. But we must ensure they are 
truly programming-literate.

I used to use driving as a metaphor for programming - that we would look at someone 
who could not program in same way as someone who could not drive. Askance, unusual. 
But I believe the change is deeper. being able to use a car, let us say drive safely,
is similar to being able to use Microsoft Office, the current standard for computer-literate
the European COmputer Drivign licence. 

However it seems to go beyond that, someone is not considered literate if able to 
fold paper.
















Footnotes
---------
.. [A] http://www.quotedb.com/quotes/1563
.. [B] Socrates was forced to commit suicide by drinking Hemlock. http://en.wikipedia.org/wiki/Socrates#Trial_and_Death

.. [#] Jack Reeves is good on this - more on him later.

